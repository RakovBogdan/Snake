class SnakeGame {

	static int xPixelSize;
	static int yPixelSize;
	static int exitButton; //'q' button
	static int leftButton;
	static int rightButton;
	static int upButton;
	static int downButton;
	static int left;
	static int right;
	static int up;
	static int down;

	field Snake snake;
	field int direction;
	field Grid grid;

	constructor SnakeGame new() {
		var int snakeLength;
		var int snakeWidth;
		let yPixelSize = 256;
		let xPixelSize = 512;
		let exitButton = 81;
		let leftButton = 130;
		let upButton = 131;
		let rightButton = 132;
		let downButton = 133;
		let left = 1;
		let up = 2;
		let right = 3;
		let down = 4;

		let snakeLength = 5;
		let snakeWidth = 8;
		let snake = Snake.new(snakeLength, snakeWidth);
		let grid = snake.getGrid();
		let direction = right;
		return this;
	} 

	method void start() {
		var int currentKeyPressed;
		var boolean exit;

		let exit = false;

		while (~(exit)) {
			do moveSnake();

			let currentKeyPressed = Keyboard.keyPressed();
			if (currentKeyPressed = exitButton) {
				let exit = true;
			}
			do readDirection(currentKeyPressed);
			if (~(checkSnakeInGrid())) {
				let exit = true;
			}
		}

		return;
	}

	method void moveSnake() {
		if (direction = left) {
			do snake.moveLeft();
		}  
		if (direction = right) {
			do snake.moveRight();
		} 
		if (direction = up) {
			do snake.moveUp();
		}
		if (direction = down) {
			do snake.moveDown();
		}
		do Sys.wait(100);
		return;
	}

	method boolean checkSnakeInGrid() {
		var SnakePart head;
		var int headX;
		var int headY;

		let head = snake.getHead();
		let headX = head.getXIndex();
		let headY = head.getYIndex();
		
		if (direction = right) {
			let headX = headX + 1;
		}
		if (direction = left) {
			let headX = headX - 1;
		}
		if (direction = up) {
			let headY = headY - 1;
		}
		if (direction = down) {
			let headY = headY + 1;
		}

		return grid.isCoordinateInGrid(headX, headY);
	} 

	method void readDirection(int currentKeyPressed) {
		if ((currentKeyPressed = leftButton) & ~(direction = right)) {
			let direction = left;
		}
		if ((currentKeyPressed = upButton) & ~(direction = down)) {
			let direction = up;
		}
		if ((currentKeyPressed = rightButton) & ~(direction = left)) {
			let direction = right;
		}
		if ((currentKeyPressed = downButton) & ~(direction = up)) {
			let direction = down;
		}
		return;
	}

	method void dispose() {
		do snake.dispose();
		do Memory.deAlloc(this);
		return;
	}
}