class SnakeGame {

	static int xPixelSize;
	static int yPixelSize;
	static int exitButton; //'q' button
	static int restartButton; //'r' button
	static int leftButton;
	static int rightButton;
	static int upButton;
	static int downButton;
	static int left;
	static int right;
	static int up;
	static int down;
	
	field int randomSeed;
	field Snake snake;
	field int direction;
	field Grid grid;
	field Array food;

	function int getLeft() {
		return left;
	}
	
	function int getRight() {
		return right;
	}
	
	function int getUp() {
		return up;
	}
	
	function int getDown() {
		return down;
	}

	constructor SnakeGame new() {
		var int snakeLength;
		var int snakeWidth;
		let yPixelSize = 256;
		let xPixelSize = 512;
		let exitButton = 81;
		let restartButton = 82;
		let leftButton = 130;
		let upButton = 131;
		let rightButton = 132;
		let downButton = 133;
		let left = 1;
		let up = 2;
		let right = 3;
		let down = 4;

		let snakeLength = 10;
		let snakeWidth = 16;
		let snake = Snake.new(snakeLength, snakeWidth);
		let grid = snake.getGrid();
		let direction = right;

		return this;
	} 

	method void start() {
		var int currentKeyPressed;
		var boolean gameOver;
		
		do generateFoodOnGrid();
		
		let gameOver = false;
		while (~(gameOver)) {
			let currentKeyPressed = Keyboard.keyPressed();
			if (currentKeyPressed = exitButton) {
				let gameOver = true;
			}
			do readDirection(currentKeyPressed);

			if (checkIfNextBlockIsFood()) {
				let gameOver = ~(eatFood());
			} else {
				let gameOver = ~(moveSnake());
			}
		}

		do processGameOver();

		return;
	}




	method void generateFoodOnGrid() {
		var Array foodCoordinates;
        var SnakePart head;
		var int numberOfSteps;
        
        let head = snake.getHead();
		let numberOfSteps = LCGRandom.randRange(1, grid.getSize() - snake.getLength());
		
		let foodCoordinates = grid.getNextBlockAfterSteps(head.getXIndex(),
			head.getYIndex(), numberOfSteps);

		if (~(grid.isCoordinateEmpty(foodCoordinates[0], foodCoordinates[1]))) {
			let foodCoordinates = grid.drawNextEmptyBlock(foodCoordinates[0], foodCoordinates[1]);
		} else {
			do grid.drawBlock(foodCoordinates[0], foodCoordinates[1]);
		}

		let food = foodCoordinates;

		return;
	}

	method boolean moveSnake() {
		if (~snake.checkSnakeNextMoveIsInGrid(direction)) {
			return false;
		}
		if (snake.nextMoveCollides(direction)) {
			return false;
		}

		do snake.move(direction);
		do Sys.wait(100);
		return true;
	}
	
	method boolean checkIfNextBlockIsFood() {
		var Array nextCoordinates;
		let nextCoordinates	= snake.calculateCoordinatesInDirection(direction);

		return ((food[0] = nextCoordinates[0]) & (food[1] = nextCoordinates[1]));
	}

	method boolean eatFood() {
		do snake.eat(direction);
		do food.dispose();
		do Sys.wait(100);
		do generateFoodOnGrid();
		if (food = null) {
			return false;
		}
		return true;
	}

	method void readDirection(int currentKeyPressed) {
		if ((currentKeyPressed = leftButton) & ~(direction = right)) {
			let direction = left;
		}
		if ((currentKeyPressed = upButton) & ~(direction = down)) {
			let direction = up;
		}
		if ((currentKeyPressed = rightButton) & ~(direction = left)) {
			let direction = right;
		}
		if ((currentKeyPressed = downButton) & ~(direction = up)) {
			let direction = down;
		}
		return;
	}

		method void processGameOver() {
		var int currentKeyPressed;
	
		do snakeGameOverAnimation();
		do snake.eraseSnakeFromScreen();
		do grid.eraseBlock(food[0], food[1]);
		do printGameOver();
		
		return;
	}

	method void snakeGameOverAnimation() {
		var int animationCount;
		let animationCount = 5;

		while (animationCount > 0) {
			do snake.eraseSnakeFromScreen();	
			do Sys.wait(300);
			do snake.drawSnakeOnScreen();
			do Sys.wait(300);
			let animationCount = animationCount - 1;
		}

		return;
	}

	method void printGameOver() {
		do Output.moveCursor(11, 0);
		do Output.printString("Game over, score: ");
		do Output.printInt(snake.getLength());		
		return;
	}

	method void dispose() {
		do snake.dispose();
		do grid.dispose();
		do food.dispose();
		do Memory.deAlloc(this);
		return;
	}
}