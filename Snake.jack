class Snake {
	
	field SnakePart head, tail;
	field int snakeWidth;
	field int snakeLength;

	constructor Snake new(int length, int width) {
		let snakeWidth = width;
		let snakeLength = length;
		do createSnake();
		return this;
	}

	method void createSnake() {
		var int partsToDraw;
		var int partXAxisIncrement;
		let head = SnakePart.new(0, 0, snakeWidth);
		let partsToDraw = snakeLength - 1;
		let tail = head;
		let partXAxisIncrement = snakeWidth;
		
		while(~(partsToDraw = 0)) {
			do head.setNext(SnakePart.new(partXAxisIncrement, 0, snakeWidth));
			let head = head.getNext();
			let partsToDraw = partsToDraw - 1;
			let partXAxisIncrement = partXAxisIncrement + snakeWidth;
		}

		return;
	}

	method SnakePart getHead() {
		return head;
	}

	method int getSnakeWidth() {
		return snakeWidth;
	}

	method void moveRight() {
		do removeTail();
		
		do head.setNext(SnakePart.new(head.getX() + snakeWidth, head.getY(), snakeWidth));
		let head = head.getNext(); 
		return;
	}

	method void moveLeft() {
		do removeTail();
		
		do head.setNext(SnakePart.new(head.getX() - snakeWidth, head.getY(), snakeWidth));
		let head = head.getNext(); 
		return;
	}

	method void moveUp() {
		do removeTail();
		
		do head.setNext(SnakePart.new(head.getX(), head.getY() - snakeWidth, snakeWidth));
		let head = head.getNext(); 
		return;
	}

	method void moveDown() {
		do removeTail();
		
		do head.setNext(SnakePart.new(head.getX(), head.getY() + snakeWidth, snakeWidth));
		let head = head.getNext(); 
		return;
	}

	method void removeTail() {
		var SnakePart tailToRemove;
		let tailToRemove = tail;
		let tail = tail.getNext();
		do tailToRemove.dispose();
		return;
	}

	method void dispose() {
		var SnakePart tailsNext;
		while (~(tail = null)) {
			let tailsNext = tail.getNext();
			do tail.dispose();
			let tail = tailsNext;
		}
		do Memory.deAlloc(this);
		return;
	}
}