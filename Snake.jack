class Snake {
	
	field Grid grid;
	field SnakePart head, tail;
	field int snakeLength;

	constructor Snake new(int length, int width) {
		let grid = Grid.new(width);
		let snakeLength = length;
		do createSnake();
		return this;
	}

	method void createSnake() {
		var int partsCreated;
		let head = SnakePart.new(0, 0);
		do grid.drawBlock(0, 0);
		let tail = head;
		let partsCreated = 1;
		
		while(partsCreated < snakeLength) {
			do head.setNext(SnakePart.new(partsCreated, 0));
			do grid.drawBlock(partsCreated, 0);
			let head = head.getNext();
			let partsCreated = partsCreated + 1;
		}

		return;
	}

	method int getLength() {
		return snakeLength;
	}

	method Grid getGrid() {
		return grid;
	}

	method SnakePart getHead() {
		return head;
	}

	method void eatRight() {
		do head.setNext(SnakePart.new(head.getXIndex() + 1, head.getYIndex()));
		do grid.drawBlock(head.getXIndex() + 1, head.getYIndex());
		let head = head.getNext(); 
		let snakeLength = snakeLength + 1;
		return;
	}
	
	method void eatLeft() {
		do head.setNext(SnakePart.new(head.getXIndex() - 1, head.getYIndex()));
		do grid.drawBlock(head.getXIndex() - 1, head.getYIndex());
		let head = head.getNext(); 
		let snakeLength = snakeLength + 1;
		return;
	}
	
	method void eatUp() {
		do head.setNext(SnakePart.new(head.getXIndex(), head.getYIndex() - 1));
		do grid.drawBlock(head.getXIndex(), head.getYIndex() - 1);
		let head = head.getNext(); 
		let snakeLength = snakeLength + 1;
		return;
	}
	
	method void eatDown() {
		do head.setNext(SnakePart.new(head.getXIndex(), head.getYIndex() + 1));
		do grid.drawBlock(head.getXIndex(), head.getYIndex() + 1);
		let head = head.getNext(); 
		let snakeLength = snakeLength + 1;
		return;
	}
	
	method void moveRight() {
		do removeTail();
		
		do head.setNext(SnakePart.new(head.getXIndex() + 1, head.getYIndex()));
		do grid.drawBlock(head.getXIndex() + 1, head.getYIndex());
		let head = head.getNext(); 
		return;
	}

	method void moveLeft() {
		do removeTail();
		
		do head.setNext(SnakePart.new(head.getXIndex() - 1, head.getYIndex()));
		do grid.drawBlock(head.getXIndex() - 1, head.getYIndex());
		let head = head.getNext(); 
		return;
	}

	method void moveUp() {
		do removeTail();
		
		do head.setNext(SnakePart.new(head.getXIndex(), head.getYIndex() - 1));
		do grid.drawBlock(head.getXIndex(), head.getYIndex() - 1);
		let head = head.getNext(); 
		return;
	}

	method void moveDown() {
		do removeTail();
		
		do head.setNext(SnakePart.new(head.getXIndex(), head.getYIndex() + 1));
		do grid.drawBlock(head.getXIndex(), head.getYIndex() + 1);
		let head = head.getNext(); 
		return;
	}

	method void removeTail() {
		var SnakePart tailToRemove;
		let tailToRemove = tail;
		let tail = tail.getNext();
		do grid.eraseBlock(tailToRemove.getXIndex(), tailToRemove.getYIndex());
		do tailToRemove.dispose();
		return;
	}

	method void dispose() {
		while (~(tail = null)) {
			do removeTail();
		}
		do grid.dispose();
		do Memory.deAlloc(this);
		return;
	}
}